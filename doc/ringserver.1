.TH RINGSERVER 1 2024/11/16
.SH NAME
ringserver \- stream oriented packet ring buffer

.SH SYNOPSIS
.nf
ringserver [options] [configfile]
.fi

.SH DESCRIPTION
\fBringserver\fP is a TCP-based ring buffer designed for packetized
streaming data.  The buffer operates on a First-in-first-out basis
with newly arriving packets pushing older packets out of the buffer.
The ring packets are not format specific and may contain any type of
data.  All communications are performed via TCP interfaces.  Data
streams are available to clients using the SeedLink and DataLink
protocols and submitted to the server using the DataLink protocol.
WebSocket connections are supported for the SeedLink and DataLink
protocols and general status is available via HTTP.

The server is configured either with options on the command line,
through environment variables, and/or by using a \fBringserver\fP
config file.  The order of precedence for configuration options is
command line, environment variables, and then config file.

Only the most common options are available on the command line, all
options are controllable via environment variables and the config file.
Detailed descriptions for each option are included in the example
config file that accompanies the source code.  Many options are dynamic,
meaning that they can be changed while the server is running.  In this
case the server will recognize that the config file has changed and
will re-read it's configuration.  This is especially useful for
updating access controls, logging verbosity and other logging
parameters.

In normal operation packet buffer contents are saved in files when the
server is shut down making the server stateful across restarts.  By
default the packet buffer is managed as a memory-mapped file. The
buffer can optionally be maintained completely in system memory, only
reading and writing the buffer contents on startup and shutdown (useful
in environments where memory-mapping is not possible).

Client access is controlled using IP addresses.  A match list requires
that client addresses match one of the entries.  A reject list requires
that client addresses do _not_ match one of the entires.  A write list
provides permission to submit packets to specific client addresses.
A limit list specifies which streams a client is allowed to access.
See \fBAccess Control\fP for more details.

Transfer logs can optionally be written to track the transmission and
reception of data packets to and from the server.  This tracking is
stream-based and identifies the number of packet bytes of each unique
stream transferred to or from each client connection.

The server supports multiple protocols: SeedLink, DataLink, HTTP with
WebSocket.  The server can listen on multiple network ports, and each
port can be configured to support any combination of the protocols.
For ports configured for TLS encryption, only a single protocol is
supported and must be specified.
See \fBMulti-protocol support\fP for more information.

The server also has limited support for simple HTTP requests.  When
support is enabled, server status, stream lists and other details can
be accessed with simple HTTP requests.
See \fBHTTP Support\fP for more details.

The slinktool(1) and dalitool(1) programs can be used to query the
ringserver for various information via the SeedLink and DataLink
interfaces respectively.  The dalitool program was developed in
parallel with ringserver and the DataLink protocol and is the
recommended query tool for ringserver admins.

.SH OPTIONS

.IP "-V"
Print the program version and exit.

.IP "-h"
Print the program help/usage and exit.

.IP "-H"
Print an extended help/usage and exit.

.IP "-C"
Print a ringserver configuration file and exit.  The output contains
descriptions of all available configuration parameters and the
environment variables that can be used to set them.

.IP "-v"
Be more verbose.  This flag can be used multiple times ("-v -v" or
"-vv") for more verbosity.

.IP "-I \fIServerID\fP"
Server ID reported to the clients.  The value may be a quoted string
containing spaces.  The default value is "Ring Server".

.IP "-M \fImaxclientsperIP\fP"
Maximum number of concurrently connected clients per IP address.  This
limit does not apply to addresses with write permission.  There is no
default maximum.

.IP "-m \fImaxclients\fP"
Maximum number of concurrently connected clients.  The default maximum
is 600.

.IP "-Rd \fIringdir\fP"
Base directory for the server to store the packet buffer data files.
This parameter must be specified via this option, environment variable,
or config file; there is no default.

.IP "-Rs \fIbytes\fP"
Size of the packet buffer in bytes, default size is 1 GiB.  The size of
the ring, in combination with the ring packet size, determine how much
past data is available in the buffer.  If the server is configured to
memory-map the packet buffer files the maximum size of the ring is
limited to how large a file the host system can support.  If the
server is configured to maintain the ring in system memory the size is
limited to system memory.

.IP "-Rp \fIpacketsize\fP"
Maximum ring packet data size (not including packet buffer header),
default is 512 bytes.

.IP "-NOMM"
No memory-mapping, maintain the ring buffer in system memory only.  On
startup the ring buffer files will be read into memory and on shutdown
the memory buffers will be written back to the files.  This option
might be useful in environments where memory-mapping of files is not
possible or is unreliable or slow (e.g. network storage).

.IP "-L \fIport\fP"
Network port to listen for incoming connections on.  By default the
server will not listen for connections, setting at least one listen
port is needed to communicate with the server.  By default, a listening
port will accept all supported protocols.  Restricting a port to only
allow specific protocols can be done using a configuration file or adding
flags to the port declaration, see \fBMulti-protocol Support\fP for more
information.

.IP "-SL \fIport\fP"
.IP "-DL \fIport\fP"
.IP "-HL \fIport\fP"
These options are shortcuts for configuring a listening port for only
SeedLink, DataLink or HTTP protocols respectively.

.IP "-T \fIlogdir\fP"
Transfer log file base directory, by default the server does not write
transfer logs.  If a directory is specified both transmission and
reception logs will be written, these two logs can be toggled
individually in the server config file.

.IP "-Ti \fIhours\fP"
Transfer log writing interval in hours, default interval is 24 hours.
The interval always starts at day boundaries, for example if the
interval is set to 2 hours then the first interval in a given day will
cover hours 0 through 2, the next 2 through 4, etc.

.IP "-Tp \fIprefix\fP"
Transfer log file prefix, by default no prefix is added to the fixed
section of the log file name.

.IP "-STDERR"
Send all diagnostic output to stderr instead of stdout.  This is
useful in situations where logging output is captured by another
program on stderr and to separate ringserver diagnostics from other
output on the console.

.IP "-MSWRITE \fIformat\fP"
A special mode of ringserver is to write all miniSEED data records
received via DataLink to a user defined directory and file structure.
See \fBminiSEED Archiving\fP for more details.

.IP "-MSSCAN \fIdirectory\fP [suboptions]"
A special mode of ringserver is to recursively scan a directory for
files containing miniSEED formatted data records and insert them into
the buffer.  Optional suboptions control scanning behavior, the
StateFile suboption is highly recommended.
See \fBminiSEED Scanning\fP for more details.

.IP "-VOLATILE"
Create a volatile (non-stateful) ring buffer, in other words do not
read packet buffer contents from ring files on startup or write them
on shutdown.  This is useful in combination with the -MSWRITE option
when no stateful buffer is needed.

.SH "Config file parameters"
All of the command line parameters have config file and environment
variable equivalents.  Many of the config file parameters are dynamic,
if they are changed the server will re-read it's configuration on the
fly. See the detailed parameter descriptions in the documented example
config file.

.SH "Access Control"

Access control is based on IP addresses and configured using the
following config file parameters and environment variables:

.nf
  \fBMatchIP\fP or \fBRS_MATCH_IP\fP
  \fBRejectIP\fP or \fBRS_REJECT_IP\fP
  \fBLimitIP\fP or \fBRS_LIMIT_IP\fP
  \fBWriteIP\fP or \fBRS_WRITE_IP\fP
  \fBTrustedIP\fP or \fBRS_TRUSTED_IP\fP
.fi

By default all clients are allowed to connect.  Specific clients can
be rejected using the \fBRejectIP\fP config parameter.  If any
\fBMatchIP\fP config parameters are specified only addresses that
match one of the entries, and are not rejected, are allowed to connect.

By default all clients are allowed access to all streams in the
buffer, and clients with write permission are allowed to write any
streams.  Specific clients can be limited to access or write subsets
of streams using the \fBLimitIP\fP config parameter.  This parameter
takes a regular expression that is used to match stream IDs that the
client(s) are allowed access to or to write.

By default all clients are allowed to request the server ID, simple
status and list of streams.  Specific clients can be allowed to access
connection information and more detailed status using the
\fBTrustedIP\fP config parameter.

If no client addresses are granted write permission via \fBWriteIP\fP
or granted trusted status via \fBTrustedIP\fP then the 'localhost'
address (local loopback) are granted those permissions.

Access control is host range (network) based, and specified as an
address followed by an optional prefix in CIDR notation.  For example:
"192.168.0.1/24" specifies the range of addresses from 192.168.0.1 to
192.168.0.254.  The address may be a hostname, which will be resolved
on startup.  The prefix is optional and, if omitted, defaults to
specifying only the single address.

.SH "SeedLink Support"

The legacy SeedLink protocol (v3) only transmits 512-byte miniSEED data
records.  This server is able to transmit miniSEED records of any
length via SeedLink.  If you wish to ensure compatibility with
legacy clients, only 512-byte miniSEED records should be submitted
to the server.

This server supports the wild-carding of network and station codes
during SeedLink negotiation using the '?' and '*' characters for
single or multiple character matches respectively.  Not all SeedLink
clients support wild-carded network and station codes.

.SH "Multi-protocol Support"

Network listening ports can respond to all supported protocols
(SeedLink, DataLink and HTTP) for non-TLS ports.  The first command
received by the server is used to determine which protocol is being
used by the client, all subsequent communication is expected in this
protocol.  Listening ports configured for TLS encryption can only
support a single protocol that must be specified.

Both IPv4 and IPv6 protocol families are supported by default (if
supported by the system).

The network protocols and families allowed by any given listening
port can be set by adding flags to the port specification.  See the
available flags in the \fBListen\fP description of the ringserver
config file example, or by using the \fB-C\fP command line option
to print a config file.

Examples of adding flags to a port specification:

.nf
  \fB-L "18000 SeedLink HTTP"\fP        : CLI, SeedLink and HTTP on port 18000
  \fB-SL "18000 IPv4 TLS"\fP            : CLI, SeedLink via TLS on port 18000, IPv4 only
  \fBRS_LISTEN_PORT="8080 HTTP IPv6"\fP : EnvVar, HTTPS on port 8080, IPv6 only
  \fBListenPort 16000 DataLink\fP       : Config file, DataLink on port 16000
.fi

.SH "HTTP Support"

The server will respond to HTTP requests for a few fixed resources.
If the \fBWebRoot\fP config parameter is set to a directory, the files
under that directory will also be served when requested through the
HTTP GET method.  Except for the fixed resources, the HTTP server
implementation is limited to returning existing files and returning
"index.html" files when a directory is requested.

The following fixed resources are supported:

.nf
  \fB/id\fP           - Server identification
  \fB/id/json\fP      - Server identification in JSON
  \fB/streams\fP      - List of available streams with time range
  \fB/streams/json\fP - List of available streams with time range in JSON
  \fB/streamids\fP    - List of available streams
  \fB/status\fP       - Server status, limited access*
  \fB/status/json\fP  - Server status in JSON, limited access*
  \fB/connections\fP  - List of connections, limited access*
  \fB/connections/json\fP - List of connections in JSON, limited access*
  \fB/seedlink\fP     - Initiate WebSocket connection for Seedlink
  \fB/datalink\fP     - Initiate WebSocket connection for DataLink
.fi

Access to the \fBstatus\fP and \fBconnections\fP information is
limited to clients that have trusted permission.

The \fBstreams\fP, \fBstreamids\fP and \fBconnections\fP endpoints
accept a \fImatch\fP parameter that is a regular expression pattern
used to limit the returned information.  For the \fBstreams\fP and
\fBstreamids\fP endpoints the matching is applied to stream IDs.  For
the \fBconnections\fP endpoint the matching is applied to hostname,
client IP address and client ID. For example:
http://localhost/streams?match=IU_ANMO.

After a WebSocket connection has been initiated with either the
\fBseedlink\fP or \fBdatalink\fP end points, the requested protocol is
supported exactly as it would be normally with the addition of
WebSocket framing.  Each server command should be contained in a
single WebSocket frame, independent of other commands.

Custom HTTP headers may be included in HTTP responses using the
\fBHTTPHeader\fP config file parameter.  This can be used, for example,
to enable cross-site HTTP requests via Cross-Origin Resource Sharing (CORS).

.SH "Transfer logging"
The \fB-T\fP command line option or the \fBTransferLogTX\fP or
\fBTransferLogRX\fP config file parameters (or equivalent environment
variables) turn on logging of data either transmitted or received.
The log interval and file name prefix can be changed via
the \fB-Ti\fP and \fB-Tp\fP command line options.

Both the transmission (TX) and reception (RX) log files contain
entries that following this pattern:

1) A "START CLIENT" line that contains the host name, IP address,
protocol, client ID, log time, and connection time.

2) One or more data lines of the following form:

.nf
\fB[Stream ID] [bytes] [packets]\fP
.fi

3) An "END CLIENT" line including the total bytes or this entry.

Note: the byte counts are the sum of the data payload bytes in each
packet and do not include the DataLink or SeedLink protocol headers.

An example "TX" file illustrating a transmission entry:

.nf
START CLIENT host.iris.edu [192.168.255.255] (SeedLink|Client) @ 2018-03-30 07:00:05 (connected 2018-03-30 06:59:36) TX
FDSN:IU_SNZO_10_B_H_Z/MSEED 2560 5
FDSN:IU_SNZO_00_B_H_Z/MSEED 2048 4
END CLIENT host.iris.edu [192.168.255.255] total TX bytes: 4608
.fi

.SH "External packet IDs"

With the DataLink v1.1 protocol a client may submit packets with a
specified packet ID to use instead of a generated ID.  This is useful
to implement multiple servers that share common packet IDs for use
with a network load balancer, such that it does not matter to which
server a client connects.

These packet IDs are used in the SeedLink and DataLink protocols by
clients to track and resume data streams.  In SeedLink these are called
sequence numbers.

For ringserver, packet IDs, aka sequence numbers, must be between 0 and
(UINT64_MAX - 10), or 18446744073709551605.  The last 10 values
of the uint64 range are reserved for internal use to indicate special
conditions.  These values are not expected to be encountered in typical
data streaming operation.

Furthermore, external IDs submitted with packets are strongly recommended
to be unique and monotonically increasing.  Such a sequence of IDs
support efficient data stream resumption and tracking.

.SH "miniSEED Archiving"
Using either the \fB-MSWRITE\fP command line option or the
\fBMSeedWrite\fP config file parameter the server can be configured to
write all miniSEED data records received via DataLink to a user
defined directory and file structure.

The archive \fIformat\fP argument is expanded for each packet processed
using the following flags:

.nf
  \fBn\fP : network code, white space removed
  \fBs\fP : station code, white space removed
  \fBl\fP : location code, white space removed
  \fBc\fP : channel code, white space removed
  \fBq\fP : record quality indicator (D,R,Q,M), single character
  \fBY\fP : year, 4 digits
  \fBy\fP : year, 2 digits zero padded
  \fBj\fP : day of year, 3 digits zero padded
  \fBH\fP : hour, 2 digits zero padded
  \fBM\fP : minute, 2 digits zero padded
  \fBS\fP : second, 2 digits zero padded
  \fBF\fP : fractional seconds, 4 digits zero padded
  \fBD\fP : current year-day time stamp of the form YYYYDDD
  \fBL\fP : data record length in bytes
  \fBr\fP : sample rate (Hz) as a rounded integer
  \fBR\fP : sample rate (Hz) as a float with 6 digit precision
  \fBh\fP : host name of client submitting data
  \fB%\fP : the percent (%) character
  \fB#\fP : the number (#) character
.fi

The flags are prefaced with either the \fB%\fP or \fB#\fP modifier.
The \fB%\fP modifier indicates a defining flag while the \fB#\fP
indicates a non-defining flag.  All received packets with the same set
of defining flags will be saved to the same file. Non-defining flags
will be expanded using the values in the first packet received for the
resulting file name.

Time flags are based on the start time of the given packet.

Files are created with (permission) mode 666 and directories are
created with mode 777.  An operator of ringserver can control the
final permissions of the files by adjusting the umask as desired.

Some preset archive layouts are available:

.nf
  \fBBUD\fP   : \fI%n/%s/%s.%n.%l.%c.%Y.%j\fP  (BUD layout)
  \fBCHAN\fP  : \fI%n.%s.%l.%c\fP  (channel)
  \fBQCHAN\fP : \fI%n.%s.%l.%c.%q\fP  (quality-channel-day)
  \fBCDAY\fP  : \fI%n.%s.%l.%c.%Y:%j:#H:#M:#S\fP  (channel-day)
  \fBSDAY\fP  : \fI%n.%s.%Y:%j\fP  (station-day)
  \fBHSDAY\fP : \fI%h/%n.%s.%Y:%j\fP  (host-station-day)
.fi

The preset archive layouts are used by prefixing a target directory
with the preset identifier followed by an '@' character.  For example:

\fBBUD@/data/bud/\fP

would write a BUD like structure in the /data/bud/ directory.

Other example:

\fB/archive/%n/%s/%n.%s.%l.%c.%Y.%j\fP

would be expanded to day length files named something like:

\fB/archive/IU/ANMO/IU.ANMO..BHE.2003.055\fP

Using non-defining flags the format string:

\fB/data/%n.%s.%Y.%j.%H:#M:#S.miniseed\fP

would be expanded to:

\fB/data/IU.ANMO.2003.044.14:17:54.miniseed\fP

resulting in hour length files because the minute and second are
specified with the non-defining modifier.  The minute and second
fields are from the first packet in the file.

.SH "miniSEED Scanning"
Using either the \fB-MSSCAN\fP command line option or the
\fBMSeedScan\fP config file parameter (or equivalent environment
variable) the server can be configured to recursively scan a directory
for files containing miniSEED data records and insert them into the
buffer.  Intended for real-time data re-distribution, files are
continuously scanned, newly added records are inserted into the buffer.

Sub-options can be used to control the scanning process.  The
sub-options are specified on the same line as the scan directory as
key-value pairs separated by an equals '=' character and may not
contain spaces (because they are separated by spaces).  Do not use
quotes for the values.  The available sub-options are:

.nf
  \fBStateFile\fP : File to save scanning state through restarts
  \fBMatch\fP : Regular expression to match file names
  \fBReject\fP : Regular expression to reject file names
  \fBInitCurrentState\fP : Initialize scanning to current state
  \fBMaxRecurse\fP : Maximum recursion depth (default is no limit)
.fi

Except for special cases the \fBStateFile\fP option should always be
specified, otherwise a restart of the server could re-read data
records that it has already read.

If the \fBInitCurrentState\fP option is set to '\fBy\fP' the scanning
will only read new data, effectively skipping all the data discovered
during the first scan, under the following conditions:
.nf
1) No StateFile has been specified
2) StateFile has been specified but does not exist
.fi

The \fBInitCurrentState\fP option is useful to avoid reading all
existing data when starting a server scanning an existing large
dataset.  It is also useful to reset the dataflow to current data
after a lengthy downtime, simply remove the statefile(s) before
starting the server.

To scan a data directory and save the scanning state to a StateFile
configure the server with either a config file option or command line,
respectively:

\fBMSeedScan /data/miniseed/ StateFile=/opt/ringserver/scan.state\fP

\fB-MSScan "/data/miniseed/ StateFile=/opt/ringserver/scan.state"\fP

To limit the scanning to file names matching a certain pattern use
the Match option, e.g. files ending in ".mseed":

\fBMSeedScan /data/miniseed/ StateFile=/data/scan.state Match=.*\\.mseed$\fP

.SH AUTHOR
.nf
Chad Trabant
EarthScope Data Services
.fi
